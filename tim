#!/usr/bin/env zsh

# Copyright (c) 2012, Göran Gustafsson. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#  Redistributions of source code must retain the above copyright notice, this
#  list of conditions and the following disclaimer.
#
#  Redistributions in binary form must reproduce the above copyright notice,
#  this list of conditions and the following disclaimer in the documentation
#  and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

##############################################################################
# Web: https://github.com/ggustafsson/Tim                                    #
# Git: git://github.com/ggustafsson/Tim.git                                  #
##############################################################################

VERSION=1.1.8
FILENAME=$0:t # Get the current filename of the script.
DIRECTORY=$0:A:h # Get the path of the directory the script is in.

CMD_SETTINGS=(TIMER_CMD WORK_CMD BREAK_CMD POMODORO_CMD)
RPT_SETTINGS=(TIMER_REPEAT_CMD POMODORO_REPEAT_CMD)
INT_SETTINGS=(INTERVAL POMODORO_WORK POMODORO_BREAK POMODORO_STOP)


##############################################################################
# CONFIGURATION SECTION                                                      #
##############################################################################
[ -r ~/.timrc ] && source ~/.timrc # Lazy fix. This is probably temporary.
                                   # EDIT: I lied. Not temporary at all ;)

if [[ $OSTYPE == darwin* ]]; then
  DEFAULT_CMD=afplay # Comes with Mac OS X.
else
  DEFAULT_CMD="aplay -q" # Comes with alsa-utils.
fi

# If these variables are not found in ~/.timrc then set them. Tim checks for
# audio files in this order: ~/.timrc, ~/.tim folder and then the script $PWD.
if [ -z $TIMER_CMD ]; then
  USE_DEFAULT_CMD=1

  if [ -f ~/.tim/alarm.wav ]; then
    TIMER_CMD="$DEFAULT_CMD ~/.tim/alarm.wav"
  elif [ -f $DIRECTORY/audio_files/alarm.wav ]; then
    TIMER_CMD="$DEFAULT_CMD $DIRECTORY/audio_files/alarm.wav"
  else
    FILE_ERROR=1
  fi
fi

if [ -z $WORK_CMD ]; then
  USE_DEFAULT_CMD=1

  if [ -f ~/.tim/work.wav ]; then
    WORK_CMD="$DEFAULT_CMD ~/.tim/work.wav"
  elif [ -f $DIRECTORY/audio_files/work.wav ]; then
    WORK_CMD="$DEFAULT_CMD $DIRECTORY/audio_files/work.wav"
  else
    FILE_ERROR=1
  fi
fi

if [ -z $BREAK_CMD ]; then
  USE_DEFAULT_CMD=1

  if [ -f ~/.tim/break.wav ]; then
    BREAK_CMD="$DEFAULT_CMD ~/.tim/break.wav"
  elif [ -f $DIRECTORY/audio_files/break.wav ]; then
    BREAK_CMD="$DEFAULT_CMD $DIRECTORY/audio_files/break.wav"
  else
    FILE_ERROR=1
  fi
fi

if [ -z $POMODORO_CMD ]; then
  USE_DEFAULT_CMD=1

  if [ -f ~/.tim/alarm.wav ]; then
    POMODORO_CMD="$DEFAULT_CMD ~/.tim/alarm.wav"
  elif [ -f $DIRECTORY/audio_files/alarm.wav ]; then
    POMODORO_CMD="$DEFAULT_CMD $DIRECTORY/audio_files/alarm.wav"
  else
    FILE_ERROR=1
  fi
fi

[ -z $TIMER_REPEAT_CMD    ] && TIMER_REPEAT_CMD=0
[ -z $POMODORO_REPEAT_CMD ] && POMODORO_REPEAT_CMD=0

[ -z $POMODORO_WORK  ] && POMODORO_WORK=25
[ -z $POMODORO_BREAK ] && POMODORO_BREAK=5
[ -z $POMODORO_STOP  ] && POMODORO_STOP=4

[ -z $INTERVAL ] && INTERVAL=15


##############################################################################
# VALIDATE SETTINGS SECTION                                                  #
##############################################################################
validate_settings() {
  if [[ $USE_DEFAULT_CMD == 1 ]]; then
    Y=(${(z)DEFAULT_CMD}) # Puts the value of DEFAULT_CMD into an array.

    if ! type -p $Y[1] >& /dev/null; then # Checks if command exist.
      if [[ $1 == debug ]]; then # Different output if debug mode is on.
        echo "DEFAULT_CMD: Command '$Y[1]' does not exist!" && ERROR=1
      else
        echo "Tim wants to use '$Y[1]' but can't find it!

Install it or specify other command in your ~/.timrc file.
Read the file timrc.example for more information."

        ERROR=1 && return 1 # Set error flag and exit function.
      fi
    fi

    if [[ $FILE_ERROR == 1 ]]; then
      if [[ $1 == debug ]]; then
        echo "Tim can't find the default audio files!" && ERROR=1
      else
        echo "Tim can't find the default audio files!

Put them in ~/.tim or specify other files in your ~/.timrc file.
Read the file timrc.example for more information."

        ERROR=1 && return 1 # Set error flag and exit function.
      fi
    fi
  fi

  for X in $CMD_SETTINGS; do
    Y=(${(zP)X}) # Puts the value of the current variable into an array.

    if ! type -p $Y[1] >& /dev/null; then # Checks if command exist.
      echo "$X: Command '$Y[1]' does not exist!" && ERROR=1
    fi
  done

  for X in $RPT_SETTINGS; do
    # Checks if the settings only contain numbers and have a value of 0/1.
    if [[ ! ${(P)X} == <-> || ${(P)X} != [0-1] ]]; then
      echo "$X: Setting '${(P)X}' is not valid." && ERROR=1
    fi
  done

  for X in $INT_SETTINGS; do
    # Checks if the settings only contain numbers and have a value above 0.
    if [[ ! ${(P)X} == <-> || ${(P)X} -lt 1 ]]; then
      echo "$X: Setting '${(P)X}' is not valid." && ERROR=1
    fi
  done

  [[ $1 == debug && $ERROR == 1 ]] && echo # echo if running debug mode.
}


##############################################################################
# INFORMATION SECTION                                                        #
##############################################################################
usage() {
  echo "Usage: $FILENAME [OPTION]... [NUMBER]...
Try '--help' for more information."
}

help() {
  echo "Usage: $FILENAME [OPTION]... [NUMBER]...

  [NUMBER]                   Wait [NUMBER] minutes before starting alarm.
  -i, --interval [NUMBER]    Work [NUMBER] minutes and pause [NUMBER] minutes.
                              (Default: 15 minutes work and pause.)
  -ri, --rinterval [NUMBER]  Reverse. Start with break instead of work.
  -p, --pomodoro             Work X minutes and pause X minutes. Run X times.
                              (Default: 25 minutes work, 5 minutes break and
                               stop after 4 times.)
  -d, --debug                Display value of all variables and exit.
  -h, --help                 Display this help and exit.
  -v, --version              Output version information and exit.

Examples:

  $FILENAME 5      # Wait 5 minutes before starting alarm.
  $FILENAME -i 10  # Work for 10 minutes and pause for 10 minutes.
  $FILENAME -i     # Same as above but use the timrc (or default) setting.
  $FILENAME -p     # Pomodoro mode. Using timrc (or default) settings.

Configuration:

  Read the file timrc.example for more information."
}

version() {
  echo "Tim (Timer Script) $VERSION

Web: https://github.com/ggustafsson/Tim
Git: git://github.com/ggustafsson/Tim.git

Written by Göran Gustafsson <gustafsson.g@gmail.com>.
Released under the BSD 2-Clause license."
}


##############################################################################
# TIMER MODE SECTION                                                         #
##############################################################################
timer() {
  validate_settings
  [[ $ERROR == 1 ]] && return 1 # Terminate if there's a problem with timrc.

  (( MINUTES_IN_SECONDS = $1 * 60 )) # Convert minutes to seconds.

  echo -n "Starting timer. Waiting for $1 "
  if [[ $1 -gt 1 ]]; then
    echo "minutes."
  else
    echo "minute."
  fi
  echo "Stop with Ctrl+C."

  sleep $MINUTES_IN_SECONDS
  print -P "\n%B%F{red}ALARM SET OFF!%f%b"

  if [[ $TIMER_REPEAT_CMD == 1 ]]; then
    while true; do
      eval $TIMER_CMD
    done
  else
    eval $TIMER_CMD
  fi
}


##############################################################################
# INTERVAL MODE SECTION                                                      #
##############################################################################
interval() {
  validate_settings
  [[ $ERROR == 1 ]] && return 1 # Terminate if there's a problem with timrc.

  if [[ $1 == reverse ]]; then
    SPECIFIC_TIME=$2
  else
    SPECIFIC_TIME=$1
  fi

  if [ -z $SPECIFIC_TIME ]; then
    MINUTES=$INTERVAL
  else
    MINUTES=$SPECIFIC_TIME
  fi
  (( MINUTES_IN_SECONDS = $MINUTES * 60 ))

  if [[ $1 == reverse ]]; then
    CURRENT_MODE=break
  else
    CURRENT_MODE=work
  fi

  echo -n "Starting timer. Interval of $MINUTES "
  if [[ $MINUTES -gt 1 ]]; then
    echo "minutes."
  else
    echo "minute."
  fi
  echo -n "Start "
  if [[ $CURRENT_MODE == work ]]; then
    echo -n "working"
  else
    echo -n "break"
  fi
  echo " now. Stop with Ctrl+C."

  while true; do
    sleep $MINUTES_IN_SECONDS

    [ -z $LINEBREAK ] && echo && LINEBREAK=0

    if [[ $CURRENT_MODE == work ]]; then
      print -P "%B%F{green}TAKE A LITTLE BREAK!%f%b"
      eval $BREAK_CMD &

      CURRENT_MODE=break
    else
      print -P "%B%F{red}START WORKING NOW!%f%b"
      eval $WORK_CMD &

      CURRENT_MODE=work
    fi
  done
}


##############################################################################
# POMODORO MODE SECTION                                                      #
##############################################################################
pomodoro() {
  validate_settings
  [[ $ERROR == 1 ]] && return 1 # Terminate if there's a problem with timrc.

  # Convert minutes to seconds.
  (( POMODORO_WORK_IN_SECONDS  = $POMODORO_WORK  * 60 ))
  (( POMODORO_BREAK_IN_SECONDS = $POMODORO_BREAK * 60 ))

  CURRENT_MODE=work
  CURRENT_RUN=1
  MINUTES_IN_SECONDS=$POMODORO_WORK_IN_SECONDS

  echo "Starting timer. Pomodoro mode:
Work $POMODORO_WORK min. Break $POMODORO_BREAK min. Stop after $POMODORO_STOP.

Start working now. Stop with Ctrl+C."

  while [[ $CURRENT_RUN -lt $POMODORO_STOP ]]; do
    sleep $MINUTES_IN_SECONDS

    [ -z $LINEBREAK ] && echo && LINEBREAK=0

    if [[ $CURRENT_MODE == work ]]; then
      print -P "%B%F{green}TAKE A LITTLE BREAK!%f%b"
      eval $BREAK_CMD &

      CURRENT_MODE=break
      MINUTES_IN_SECONDS=$POMODORO_BREAK_IN_SECONDS
    else
      print -Pn "%B%F{red}START WORKING NOW!%f%b Press return when ready..."
      eval $WORK_CMD &
      read WAIT_FOR_INPUT

      CURRENT_MODE=work
      MINUTES_IN_SECONDS=$POMODORO_WORK_IN_SECONDS

      # Increment CURRENT_RUN so we can stop pomodoro mode at POMODORO_STOP.
      (( CURRENT_RUN = $CURRENT_RUN + 1 ))
    fi
  done

  sleep $MINUTES_IN_SECONDS
  echo "\nWorking session is over!"

  if [[ $POMODORO_REPEAT_CMD == 1 ]]; then
    while true; do
      eval $POMODORO_CMD # Execute POMODORO_CMD and loop until terminating.
    done
  else
    eval $POMODORO_CMD # Execute POMODORO_CMD.
  fi
}


##############################################################################
# DEBUG SECTION (DISPLAY VARIABLES)                                          #
##############################################################################
debug() {
  echo "DEBUG MODE\n"

  validate_settings debug # Send argument debug to function for more output.

  echo "VALUE OF ALL VARIABLES:
 FILENAME: $FILENAME
 DIRECTORY: $DIRECTORY
 VERSION: $VERSION
 DEFAULT_CMD: $DEFAULT_CMD"

  # Loop thru all settings and print them out.
  for X in $CMD_SETTINGS; do
    echo -n " $X: "
    if [ -z ${(P)X} ]; then
      echo "Default audio file not found!"
    else
      echo ${(P)X}
    fi
  done

  for X in $RPT_SETTINGS; do
    echo " $X: ${(P)X}"
  done

  for X in $INT_SETTINGS; do
    echo " $X: ${(P)X}"
  done
}


##############################################################################
# OPTIONS AND EXECUTION SECTION                                              #
##############################################################################
case $# in
  0) usage ;;
  1)
    case $1 in
      <->) # Check if $1 only contain numbers.
        if [[ $1 -gt 0 ]]; then
          timer $1 # Send argument $1 to the function.
        else
          usage && return 1
        fi
      ;;
      -i  | --interval)  interval         ;;
      -ri | --rinterval) interval reverse ;;
      -p  | --pomodoro)  pomodoro         ;;
      -d  | --debug)     debug            ;;
      -h  | --help)      help             ;;
      -v  | --version)   version          ;;
      *)
        usage && return 1
      ;;
    esac
  ;;
  2)
    # Check if $1 is -i or --interval and if $2 is integer.
    if [[ $1 == (-i|--interval) && $2 == <-> ]]; then
      if [[ $2 -gt 0 ]]; then # Check if integer is more than 0.
        interval $2 # Send argument $2 to the function.
      else
        usage && return 1
      fi
    # Check if $1 is -ri or --rinterval and if $2 is integer.
    elif [[ $1 == (-ri|--rinterval) && $2 == <-> ]]; then
      if [[ $2 -gt 0 ]]; then # Check if integer is more than 0.
        interval reverse $2 # Send argument reverse and $2 to the function.
      else
        usage && return 1
      fi
    else
      usage && return 1
    fi
  ;;
  *) usage && return 1 ;;
esac

